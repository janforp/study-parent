一：创建型模式-对象实例化，创建模式解耦了对象的实例化过程
1.简单工厂/工厂方法/抽象工厂
2.单例模式：某些类只能有一个实例，提供一个全局访问入口
3.原型模式：内存复制，但是有深拷贝的问题
4.生成器模式：生成复杂对象，分步骤构建

二：结构型模式-把类和对象结合在一起形成更大的结构
1.适配器模式：将一个类的方法接口转换成客户希望的另外一个接口（接口转换，类似插头转接头转换），只是转换，并不带来新功能，甚至还有一些功能无法实现，只能抛出异常
2.组合模式：将对象组合成树形结构表示"部分-整体"的层次结构
3.装饰模式：动态的给对象添加新的功能（可以动态，具体是 I/O，继承是静态的，该模式是动态的）
4.代理模式：为其他对象提供一个代理以控制对这个对象的访问（RMI等）
5.享元模式/蝇量模式：通过共享技术有效的支持大量细粒度的对象，可以减少内存的使用
6.外观模式：提供一个统一的方法来访问子系统的一群接口（对调用方来说不需要了解子系统的一些细节）
7.桥接模式：将抽象部分与他的实现部分分离，使他们可以独立的变化


三：行为型模式-类和对象如何交互，以及划分责任和算法
2.模版模式：定义一个算法结构，而将一些步骤延迟到子类中实现，也可以提供一些钩子让子类灵活扩展
3.解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器
4.策略模式：定义一系列算法，把他们封装起来，并且使他们可以互相替换
5.状态模式：允许一个对象在其内部状态改变的时候改变他的行为
6.观察者模式：对象之间的一对多的依赖关系（有点广播的感觉）
7.备忘录模式：在不破坏封装性的前提下，保存对象的内部状态
8.中介者模式：TODO 用一个中介对象来封装一系列的对象交互
9.命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化，如： Executor,ExecutorService 等
10.访问者模式：在不改变数据结构的前提下，增加作用与一组对象元素新的功能，如：员工的例子，双重分派
11.责任链：请求发生者和请求的接受者之间解藕，使得多个对象都有机会处理这个请求
12.迭代器模式：一种便利访问聚合对象中各个元素的方法，不暴露该对象的内部结构



这个专栏写得不错
http://www.kancloud.cn:8080/digest/xing-designpattern/143719